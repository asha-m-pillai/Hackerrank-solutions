/*

Consider two sets of positive integers, A = {a[0], a[1], ... , a[n-1]} and B = {b[0], b[1], ... , b[m-1]}. We say that a 
positive integer, x, is between sets A and B if the following conditions are satisfied:
- All elements in A are factors of x.
- x is a factor of all elements in B.
In other words, some x is between A and B if that value of x satisfies x mod a[i] = 0 for every a[i] in A and also satisfies
b[i] mod x = 0 for every b[i] in B. For example, if A = {2,6} and B = {12}, then our possible x values are 6 and 12.
Given A and B, find and print the number of integers (i.e., possible x's) that are between the two sets.

Input Format:
- The first line contains two space-separated integers describing the respective values of n (the number of elements in set A)
and m (the number of elements in set B). 
- The second line contains n distinct space-separated integers describing a[0], a[1], ..., a[n-1]. 
- The third line contains m distinct space-separated integers describing b[0], b[1], ..., b[m-1].

Constraints:
# 1 <= n,m <=10
# 1 <= a[i], b[i] <= 100

Output Format:
Print the number of integers that are considered to be between A and B.

Sample Input:
2 3
2 4
16 32 96

Sample Output:
3

*/

#include <bits/stdc++.h>

using namespace std;

int getTotalX(vector <int> a, vector <int> b) {
    // Complete this function
    int noOfElem = 0, i=2;
    bool isElem = true;
    for(int search = a[a.size()-1];search <= b[0];
               search = a[a.size()-1]*i,i++)
    {
        isElem = true;
        for(int j=0; j<a.size(); j++)
        {
            if(search%a[j] != 0)
            {
                isElem = false;
                break;
            }
        }
        if (isElem == false)
            continue;
        for(int j=0; j<b.size(); j++)
        {
            if(b[j]%search != 0)
            {
                isElem = false;
                break;
            }
        }
        if (isElem == false)
            continue;
        noOfElem++;
    }
    return noOfElem;
}

int main() {
    int n;
    int m;
    cin >> n >> m;
    vector<int> a(n);
    for(int a_i = 0; a_i < n; a_i++){
       cin >> a[a_i];
    }
    vector<int> b(m);
    for(int b_i = 0; b_i < m; b_i++){
       cin >> b[b_i];
    }
    int total = getTotalX(a, b);
    cout << total << endl;
    return 0;
}
